"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2420],{3235:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var t=r(5893),i=r(1151);const l={},a="Quaternion",s={id:"modules/core/api-reference/quaternion",title:"Quaternion",description:"A class to handle Quaternions. More information on quternions can be found here. The quaternion will be represented by an instance with x, y, z, w components that make a quaternion like: xi + yj + zk + w.",source:"@site/../docs/modules/core/api-reference/quaternion.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/quaternion",permalink:"/math.gl/docs/modules/core/api-reference/quaternion",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/website/../docs/modules/core/api-reference/quaternion.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pose",permalink:"/math.gl/docs/modules/core/api-reference/pose"},next:{title:"SphericalCoordinates",permalink:"/math.gl/docs/modules/core/api-reference/spherical-coordinates"}},o={},d=[{value:"Usage",id:"usage",level:2},{value:"Members",id:"members",level:2},{value:"x, y, z, w",id:"x-y-z-w",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"fromMatrix3(m: number[9]): this",id:"frommatrix3m-number9-this",level:3},{value:"fromValues(x: number, y: number, z: number, w): number: this",id:"fromvaluesx-number-y-number-z-number-w-number-this",level:3},{value:"identity(): this",id:"identity-this",level:3},{value:"length(): number",id:"length-number",level:3},{value:"squaredLength(): number",id:"squaredlength-number",level:3},{value:"dot(): number",id:"dot-number",level:3},{value:"getAxisAngle",id:"getaxisangle",level:3},{value:"rotationTo",id:"rotationto",level:3},{value:"add",id:"add",level:3},{value:"calculateW",id:"calculatew",level:3},{value:"conjugate",id:"conjugate",level:3},{value:"invert(): this",id:"invert-this",level:3},{value:"lerp",id:"lerp",level:3},{value:"multiply",id:"multiply",level:3},{value:"normalize",id:"normalize",level:3},{value:"rotateX",id:"rotatex",level:3},{value:"rotateY",id:"rotatey",level:3},{value:"rotateZ",id:"rotatez",level:3},{value:"scale",id:"scale",level:3},{value:"set",id:"set",level:3},{value:"setAxisAngle",id:"setaxisangle",level:3},{value:"slerp",id:"slerp",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"quaternion",children:"Quaternion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class Quaternion extends MathArray extends Array\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A class to handle Quaternions. More information on quternions can be found ",(0,t.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Quaternion",children:"here"}),". The quaternion will be represented by an instance with ",(0,t.jsx)(n.code,{children:"x"}),", ",(0,t.jsx)(n.code,{children:"y"}),", ",(0,t.jsx)(n.code,{children:"z"}),", ",(0,t.jsx)(n.code,{children:"w"})," components that make a quaternion like: ",(0,t.jsx)(n.code,{children:"xi + yj + zk + w"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {Quaternion} from '@math.gl/core';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"x-y-z-w",children:"x, y, z, w"}),"\n",(0,t.jsx)(n.p,{children:"Gets or sets element 0, 1, 2 or 3 respectively"}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.p,{children:["Many of the most commonly used methods are inherited from ",(0,t.jsx)(n.a,{href:"/math.gl/docs/modules/core/api-reference/math-array",children:(0,t.jsx)(n.code,{children:"MathArray"})}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.clone()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.copy(array)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.set(...args)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.fromArray(array, offset = 0)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.toString()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.toArray(array = [], offset = 0)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.equals(array)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.exactEquals(array)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.validate(array = this)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.check(array = this)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"quaternion.normalize()"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Note that ",(0,t.jsx)(n.code,{children:"Quaternion"})," is a subclass of the built in JavaScript ",(0,t.jsx)(n.code,{children:"Array"})," and can thus technically be supplied as a parameter to any function expecting an ",(0,t.jsx)(n.code,{children:"Array"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"constructor(x = 0, y = 0, z = 0, w = 1)"})}),"\n",(0,t.jsx)(n.h3,{id:"frommatrix3m-number9-this",children:"fromMatrix3(m: number[9]): this"}),"\n",(0,t.jsx)(n.p,{children:"Creates a quaternion from the given 3x3 rotation matrix. NOTE: The resultant quaternion is not normalized, so you should be sure to renormalize the quaternion yourself where necessary."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"fromMatrix3(m)"})}),"\n",(0,t.jsx)(n.h3,{id:"fromvaluesx-number-y-number-z-number-w-number-this",children:"fromValues(x: number, y: number, z: number, w): number: this"}),"\n",(0,t.jsx)(n.p,{children:"Creates a new quat initialized with the given values"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"fromValues(x, y, z, w)"})}),"\n",(0,t.jsx)(n.h3,{id:"identity-this",children:"identity(): this"}),"\n",(0,t.jsx)(n.p,{children:"Set a quat to the identity quaternion"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"identity()"})}),"\n",(0,t.jsx)(n.h3,{id:"length-number",children:"length(): number"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the length of a quaternion"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"length()"})}),"\n",(0,t.jsx)(n.h3,{id:"squaredlength-number",children:"squaredLength(): number"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the squared length of a quaternion"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"squaredLength(a)"})}),"\n",(0,t.jsx)(n.p,{children:"@returnNumber}"}),"\n",(0,t.jsx)(n.h3,{id:"dot-number",children:"dot(): number"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the dot product of two quat's"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.dot(a, b)"})}),"\n",(0,t.jsx)(n.h3,{id:"getaxisangle",children:"getAxisAngle"}),"\n",(0,t.jsx)(n.p,{children:"Gets the rotation axis and angle for a given quaternion."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.getAxisAngle()"})}),"\n",(0,t.jsx)(n.p,{children:"If a quaternion is created with setAxisAngle, this method will return the same values as providied in the original parameter list OR functionally equivalent values."}),"\n",(0,t.jsx)(n.p,{children:"Example: The quaternion formed by axis [0, 0, 1] and angle -90 is the same as the quaternion formed by [0, 0, 1] and 270. This method favors the latter."}),"\n",(0,t.jsx)(n.h3,{id:"rotationto",children:"rotationTo"}),"\n",(0,t.jsx)(n.p,{children:"Sets a quaternion to represent the shortest rotation from one vector to another. Both vectors are assumed to be unit length."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.rotationTo(vectorA, vectorB)"})}),"\n",(0,t.jsx)(n.h3,{id:"add",children:"add"}),"\n",(0,t.jsx)(n.p,{children:"Adds two quaternions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.add(a, b)"})}),"\n",(0,t.jsx)(n.h3,{id:"calculatew",children:"calculateW"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the W component of a quat from the X, Y, and Z components. Any existing W component will be ignored."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.calculateW()"})}),"\n",(0,t.jsx)(n.h3,{id:"conjugate",children:"conjugate"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the conjugate of a quat If the quaternion is normalized, this function is faster than quat_inverse and produces the same result."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.conjugate()"})}),"\n",(0,t.jsx)(n.h3,{id:"invert-this",children:"invert(): this"}),"\n",(0,t.jsx)(n.p,{children:"Calculates the inverse of a quat"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.invert()"})}),"\n",(0,t.jsx)(n.h3,{id:"lerp",children:"lerp"}),"\n",(0,t.jsx)(n.p,{children:"Performs a linear interpolation between two quat's"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"quaternion.lerp(a, b, t)"})}),"\n",(0,t.jsx)(n.h3,{id:"multiply",children:"multiply"}),"\n",(0,t.jsx)(n.p,{children:"Multiplies two quat's"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"multiply(a, b)"})}),"\n",(0,t.jsx)(n.h3,{id:"normalize",children:"normalize"}),"\n",(0,t.jsx)(n.p,{children:"Normalize a quat"}),"\n",(0,t.jsx)(n.h3,{id:"rotatex",children:"rotateX"}),"\n",(0,t.jsx)(n.p,{children:"Rotates a quaternion by the given angle about the X axis"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"rotateX(rad)"})}),"\n",(0,t.jsx)(n.h3,{id:"rotatey",children:"rotateY"}),"\n",(0,t.jsx)(n.p,{children:"Rotates a quaternion by the given angle about the Y axis"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"rotateY(rad)"})}),"\n",(0,t.jsx)(n.h3,{id:"rotatez",children:"rotateZ"}),"\n",(0,t.jsx)(n.p,{children:"Rotates a quaternion by the given angle about the Z axis"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"rotateZ(rad)"})}),"\n",(0,t.jsx)(n.h3,{id:"scale",children:"scale"}),"\n",(0,t.jsx)(n.p,{children:"Scales a quat by a scalar number"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"scale(b)"})}),"\n",(0,t.jsx)(n.h3,{id:"set",children:"set"}),"\n",(0,t.jsx)(n.p,{children:"Set the components of a quat to the given values"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"set(i, j, k, l)"})}),"\n",(0,t.jsx)(n.h3,{id:"setaxisangle",children:"setAxisAngle"}),"\n",(0,t.jsx)(n.p,{children:"Sets a quat from the given angle and rotation axis, then returns it."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"setAxisAngle(axis, rad)"})}),"\n",(0,t.jsx)(n.h3,{id:"slerp",children:"slerp"}),"\n",(0,t.jsx)(n.p,{children:"Performs a spherical linear interpolation between two quaternions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"slerp({start = [0, 0, 0, 1], target, ratio})"})}),"\n",(0,t.jsx)(n.p,{children:"s"})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>a});var t=r(7294);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);