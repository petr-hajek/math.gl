"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3978],{8500:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>a});var d=s(4848),o=s(8453);const r={},i="Bounds",t={id:"modules/types/api-reference/bounds",title:"Bounds",description:"A common need for geospatial and 3D applications is to be able to express bounds",source:"@site/../docs/modules/types/api-reference/bounds.md",sourceDirName:"modules/types/api-reference",slug:"/modules/types/api-reference/bounds",permalink:"/math.gl/docs/modules/types/api-reference/bounds",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/types/api-reference/bounds.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Array Types",permalink:"/math.gl/docs/modules/types/api-reference/array-types"},next:{title:"Overview",permalink:"/math.gl/docs/modules/core/"}},c={},a=[{value:"Types",id:"types",level:2},{value:"<code>Bounds</code>",id:"bounds-1",level:3},{value:"<code>Bounds2D</code>",id:"bounds2d",level:3},{value:"<code>Bounds3D</code>",id:"bounds3d",level:3},{value:"Functions",id:"functions",level:2},{value:"<code>is2DBounds()</code>",id:"is2dbounds",level:3},{value:"<code>get2DBounds()</code>",id:"get2dbounds",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"bounds",children:"Bounds"})}),"\n",(0,d.jsx)(n.p,{children:"A common need for geospatial and 3D applications is to be able to express bounds\nor extents for a 2D or 3D geometry."}),"\n",(0,d.jsxs)(n.p,{children:["math.gl provides a set of ",(0,d.jsx)(n.code,{children:"Bounds*"})," types. These types could be viewed as a recommendation\nfor how vis.gl frameworks should represent bounds.\nTyping out the definitions directly is sometimes easier and clearer than importing these types from math.gl."]}),"\n",(0,d.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,d.jsx)(n.h3,{id:"bounds-1",children:(0,d.jsx)(n.code,{children:"Bounds"})}),"\n",(0,d.jsxs)(n.p,{children:["2 or 3 dimensional bounds, expressed as an array of arrays ",(0,d.jsx)(n.code,{children:"[[minX, minY], [maxX, maxY]]"})," or ",(0,d.jsx)(n.code,{children:"[[minX, minY, minZ], [maxX, maxY, maxZ]]"}),"."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"export type Bounds =\n  | [[number, number], [number, number]]\n  | [[number, number, number], [number, number, number]];\n"})}),"\n",(0,d.jsx)(n.h3,{id:"bounds2d",children:(0,d.jsx)(n.code,{children:"Bounds2D"})}),"\n",(0,d.jsxs)(n.p,{children:["2 dimensional bounds, expressed as an array of arrays ",(0,d.jsx)(n.code,{children:"[[minX, minY], [maxX, maxY]]"}),"."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"type Bounds2D = [[number, number], [number, number]];\n"})}),"\n",(0,d.jsx)(n.h3,{id:"bounds3d",children:(0,d.jsx)(n.code,{children:"Bounds3D"})}),"\n",(0,d.jsxs)(n.p,{children:["3 dimensional bounds, expressed as an array of arrays ",(0,d.jsx)(n.code,{children:"[[minX, minY, minZ], [maxX, maxY, maxZ]]"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"export type Bounds3D = [[number, number, number], [number, number, number]];\n"})}),"\n",(0,d.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsx)(n.h3,{id:"is2dbounds",children:(0,d.jsx)(n.code,{children:"is2DBounds()"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"is2DBounds(bounds: Bounds): bounds is Bounds2D\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Checks if the supplied bounds are 2D and narrows the type to ",(0,d.jsx)(n.code,{children:"Bounds2D"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"get2dbounds",children:(0,d.jsx)(n.code,{children:"get2DBounds()"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"get2DBounds(bounds: Bounds): Bounds2D`\n"})}),"\n",(0,d.jsx)(n.p,{children:"Returns 2D bounds, truncating 3D bounds to 2D if needed."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var d=s(6540);const o={},r=d.createContext(o);function i(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),d.createElement(r.Provider,{value:n},e.children)}}}]);