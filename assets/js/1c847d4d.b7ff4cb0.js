"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1286],{5680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>m});var i=r(6540);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=i.createContext({}),u=function(e){var n=i.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},s=function(e){var n=u(e.components);return i.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(r),h=t,m=d["".concat(p,".").concat(h)]||d[h]||g[h]||o;return r?i.createElement(m,a(a({ref:n},s),{},{components:r})):i.createElement(m,a({ref:n},s))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,a=new Array(o);a[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:t,a[1]=l;for(var u=2;u<o;u++)a[u]=r[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3917:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=r(8168),t=(r(6540),r(5680));const o={},a="BoundingSphere",l={unversionedId:"modules/culling/api-reference/bounding-sphere",id:"modules/culling/api-reference/bounding-sphere",title:"BoundingSphere",description:"A bounding sphere with a center and a radius.",source:"@site/../docs/modules/culling/api-reference/bounding-sphere.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/bounding-sphere",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-sphere",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/culling/api-reference/bounding-sphere.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"AxisAlignedBoundingBox",permalink:"/math.gl/docs/modules/culling/api-reference/axis-aligned-bounding-box"},next:{title:"BoundingVolume (Interface)",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-volume"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Global Functions",id:"global-functions",level:2},{value:"<code>makeBoundingSphereFromPoints(positions : iterator, result? : </code>BoundingSphere) : BoundingSphere",id:"makeboundingspherefrompointspositions--iterator-result--boundingsphere--boundingsphere",level:3},{value:"Fields",id:"fields",level:2},{value:"<code>center : Vector3</code>",id:"center--vector3",level:3},{value:"<code>radius : Number</code>",id:"radius--number",level:3},{value:"Members",id:"members",level:2},{value:"<code>constructor(center : Number[3], radius : Number)</code>",id:"constructorcenter--number3-radius--number",level:3},{value:"<code>fromCenterRadius(center : Number[3], radius : Number) : BoundingSphere</code>",id:"fromcenterradiuscenter--number3-radius--number--boundingsphere",level:3},{value:"<code>fromCornerPoints(corner : Number[3], oppositeCorner : Number[3], result? : </code>BoundingSphere) : BoundingSphere",id:"fromcornerpointscorner--number3-oppositecorner--number3-result--boundingsphere--boundingsphere",level:3},{value:"<code>fromBoundingSpheres(boundingSpheres : BoundingSphere[]) : BoundingSphere</code>",id:"fromboundingspheresboundingspheres--boundingsphere--boundingsphere",level:3},{value:"<code>clone()</code>",id:"clone",level:3},{value:"<code>equals(right : BoundingSphere) Boolean</code>",id:"equalsright--boundingsphere-boolean",level:3},{value:"<code>union(right : BoundingSphere) : BoundingSphere</code>",id:"unionright--boundingsphere--boundingsphere",level:3},{value:"<code>expand(point : Number[3]) : BoundingSphere</code>",id:"expandpoint--number3--boundingsphere",level:3},{value:"<code>intersectPlane(plane : Plane) : INTERSECTION</code>",id:"intersectplaneplane--plane--intersection",level:3},{value:"<code>transform(transform : Number[16]) : BoundingSphere</code>",id:"transformtransform--number16--boundingsphere",level:3},{value:"<code>distanceSquaredTo(point) : Number</code>",id:"distancesquaredtopoint--number",level:3},{value:"<code>transformWithoutScale(sphere, transform, result)</code>",id:"transformwithoutscalesphere-transform-result",level:3},{value:"<code>computePlaneDistances (sphere, position, direction, result)</code>",id:"computeplanedistances-sphere-position-direction-result",level:3},{value:"<code>projectTo2D(sphere, projection, result)</code>",id:"projectto2dsphere-projection-result",level:3},{value:"Attribution",id:"attribution",level:2}],s={toc:u},d="wrapper";function g(e){let{components:n,...r}=e;return(0,t.yg)(d,(0,i.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"boundingsphere"},"BoundingSphere"),(0,t.yg)("p",null,"A ",(0,t.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bounding_sphere"},"bounding sphere")," with a center and a radius."),(0,t.yg)("h2",{id:"usage"},"Usage"),(0,t.yg)("p",null,"Create a bounding sphere around the unit cube"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"import {BoundingSphere} from '@math.gl/culling';\ncont sphere = new BoundingSphere().fromCornerPoints(\n  [-0.5, -0.5, -0.5],\n  [0.5, 0.5, 0.5]\n);\n")),(0,t.yg)("p",null,"Sort bounding spheres from back to front"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"import {BoundingSphere} from '@math.gl/culling';\nconst spheres = [new BoundingSphere(...), new BoundingSphere(...), ...];\nconst cameraPosWC = ...;\nspheres.sort(\n  (a, b) => b.distanceSquaredTo(b, cameraPosWC) - a.distanceSquaredTo(a.cameraPosWC)\n);\n")),(0,t.yg)("h2",{id:"inheritance"},"Inheritance"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"class BoundingSphere implements")," ",(0,t.yg)("a",{parentName:"p",href:"./bounding-volume"},(0,t.yg)("inlineCode",{parentName:"a"},"BoundingVolume")),"."),(0,t.yg)("h2",{id:"global-functions"},"Global Functions"),(0,t.yg)("h3",{id:"makeboundingspherefrompointspositions--iterator-result--boundingsphere--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"makeBoundingSphereFromPoints(positions : iterator, result? : "),"BoundingSphere) : BoundingSphere"),(0,t.yg)("p",null,"Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points. The bounding sphere is computed by running two algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"positions")," An iterable (e.g. array) of points that the bounding sphere will enclose. Each point must have ",(0,t.yg)("inlineCode",{parentName:"li"},"x"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"y"),", and ",(0,t.yg)("inlineCode",{parentName:"li"},"z")," properties."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"result")," Optional object onto which to store the result.")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The modified ",(0,t.yg)("inlineCode",{parentName:"li"},"result")," parameter or a new ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," instance if one was not provided.")),(0,t.yg)("p",null,"See ",(0,t.yg)("a",{parentName:"p",href:"http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/"},"Bounding Sphere computation article")),(0,t.yg)("h2",{id:"fields"},"Fields"),(0,t.yg)("h3",{id:"center--vector3"},(0,t.yg)("inlineCode",{parentName:"h3"},"center : Vector3")),(0,t.yg)("p",null,"The center point of the sphere."),(0,t.yg)("h3",{id:"radius--number"},(0,t.yg)("inlineCode",{parentName:"h3"},"radius : Number")),(0,t.yg)("p",null,"The radius of the sphere."),(0,t.yg)("h2",{id:"members"},"Members"),(0,t.yg)("h3",{id:"constructorcenter--number3-radius--number"},(0,t.yg)("inlineCode",{parentName:"h3"},"constructor(center : Number[3], radius : Number)")),(0,t.yg)("p",null,"Creates a new ",(0,t.yg)("inlineCode",{parentName:"p"},"BoundingSphere")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"center"),"=",(0,t.yg)("inlineCode",{parentName:"li"},"[0, 0, 0]")," The center of the bounding sphere."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"radius"),"=",(0,t.yg)("inlineCode",{parentName:"li"},"0.0")," The radius of the bounding sphere.")),(0,t.yg)("h3",{id:"fromcenterradiuscenter--number3-radius--number--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"fromCenterRadius(center : Number[3], radius : Number) : BoundingSphere")),(0,t.yg)("p",null,"Sets the ",(0,t.yg)("inlineCode",{parentName:"p"},"BoundingSphere")," from center and radius"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"center"),"=",(0,t.yg)("inlineCode",{parentName:"li"},"[0, 0, 0]")," The center of the bounding sphere."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"radius"),"=",(0,t.yg)("inlineCode",{parentName:"li"},"0.0")," The radius of the bounding sphere.")),(0,t.yg)("h3",{id:"fromcornerpointscorner--number3-oppositecorner--number3-result--boundingsphere--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"fromCornerPoints(corner : Number[3], oppositeCorner : Number[3], result? : "),"BoundingSphere) : BoundingSphere"),(0,t.yg)("p",null,"Computes a bounding sphere from the two corner points of an axis-aligned bounding box. The sphere tighly and fully encompases the box."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"corner")," The minimum height over the rectangle."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"oppositeCorner")," The maximum height over the rectangle.")),(0,t.yg)("h3",{id:"fromboundingspheresboundingspheres--boundingsphere--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"fromBoundingSpheres(boundingSpheres : BoundingSphere[]) : BoundingSphere")),(0,t.yg)("p",null,"Computes a tight-fitting bounding sphere enclosing the provided array of bounding spheres."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"boundingSpheres")," The array of bounding spheres.")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The modified ",(0,t.yg)("inlineCode",{parentName:"li"},"result")," parameter or a new ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," instance if none was provided.")),(0,t.yg)("h3",{id:"clone"},(0,t.yg)("inlineCode",{parentName:"h3"},"clone()")),(0,t.yg)("p",null,"Duplicates a ",(0,t.yg)("inlineCode",{parentName:"p"},"BoundingSphere")," instance."),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A new ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," instance")),(0,t.yg)("h3",{id:"equalsright--boundingsphere-boolean"},(0,t.yg)("inlineCode",{parentName:"h3"},"equals(right : BoundingSphere) Boolean")),(0,t.yg)("p",null,"Compares the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"BoundingSphere")," componentwise and returns ",(0,t.yg)("inlineCode",{parentName:"p"},"true")," if they are equal, ",(0,t.yg)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"right")," The second ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere"),".")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"true")," if left and right are equal, ",(0,t.yg)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,t.yg)("h3",{id:"unionright--boundingsphere--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"union(right : BoundingSphere) : BoundingSphere")),(0,t.yg)("p",null,"Computes a bounding sphere that contains both the this and the ",(0,t.yg)("inlineCode",{parentName:"p"},"right")," bounding spheres."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"right")," The second ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere"),".")),(0,t.yg)("h3",{id:"expandpoint--number3--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"expand(point : Number[3]) : BoundingSphere")),(0,t.yg)("p",null,"Computes a bounding sphere by enlarging the provided sphere to contain the provided point."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"point")," A point to enclose in a bounding sphere.")),(0,t.yg)("h3",{id:"intersectplaneplane--plane--intersection"},(0,t.yg)("inlineCode",{parentName:"h3"},"intersectPlane(plane : Plane) : INTERSECTION")),(0,t.yg)("p",null,"Determines which side of a plane a sphere is located."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"plane")," The plane to test against.\nReturns"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.INSIDE")," if the entire sphere is on the side of the plane the normal is pointing"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.OUTSIDE")," if the entire sphere is on the opposite side"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.INTERSECTING")," if the sphere intersects the plane.")),(0,t.yg)("h3",{id:"transformtransform--number16--boundingsphere"},(0,t.yg)("inlineCode",{parentName:"h3"},"transform(transform : Number[16]) : BoundingSphere")),(0,t.yg)("p",null,"Applies a 4x4 affine transformation matrix to a bounding sphere."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"transform")," The transformation matrix to apply to the bounding sphere.")),(0,t.yg)("h3",{id:"distancesquaredtopoint--number"},(0,t.yg)("inlineCode",{parentName:"h3"},"distanceSquaredTo(point) : Number")),(0,t.yg)("p",null,"Computes the estimated distance squared from the closest point on a bounding sphere to a point."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"point")," The point")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The estimated distance squared from the bounding sphere to the point.")),(0,t.yg)("h3",{id:"transformwithoutscalesphere-transform-result"},(0,t.yg)("inlineCode",{parentName:"h3"},"transformWithoutScale(sphere, transform, result)")),(0,t.yg)("p",null,"Applies a 4x4 affine transformation matrix to a bounding sphere where there is no scale\nThe transformation matrix is not verified to have a uniform scale of 1.\nThis method is faster than computing the general bounding sphere transform using BoundingSphere.transform."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"BoundingSphere sphere The bounding sphere to apply the transformation to.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Matrix4 transform The transformation matrix to apply to the bounding sphere.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"result")," Optional object onto which to store the result."))),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The modified ",(0,t.yg)("inlineCode",{parentName:"li"},"result")," parameter or a new ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," instance if none was provided.")),(0,t.yg)("p",null,"@example\nvar modelMatrix = Transforms.eastNorthUpToFixedFrame(positionOnEllipsoid);\nvar boundingSphere = new BoundingSphere();\nvar newBoundingSphere = BoundingSphere.transformWithoutScale(boundingSphere, modelMatrix);"),(0,t.yg)("h3",{id:"computeplanedistances-sphere-position-direction-result"},(0,t.yg)("inlineCode",{parentName:"h3"},"computePlaneDistances (sphere, position, direction, result)")),(0,t.yg)("p",null,"The distances calculated by the vector from the center of the bounding sphere to position projected onto direction plus/minus the radius of the bounding sphere."),(0,t.yg)("p",null,"If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the closest and farthest planes from position that intersect the bounding sphere."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," ",(0,t.yg)("inlineCode",{parentName:"li"},"sphere")," The bounding sphere to calculate the distance to."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Cartesian3")," ",(0,t.yg)("inlineCode",{parentName:"li"},"position")," The position to calculate the distance from."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Cartesian3")," ",(0,t.yg)("inlineCode",{parentName:"li"},"direction")," The direction from position."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Interval")," ","[result]"," A Interval to store the nearest and farthest distances.")),(0,t.yg)("p",null,"Returns ",(0,t.yg)("inlineCode",{parentName:"p"},"Interval"),"- The nearest and farthest distances on the bounding sphere from position in direction."),(0,t.yg)("h3",{id:"projectto2dsphere-projection-result"},(0,t.yg)("inlineCode",{parentName:"h3"},"projectTo2D(sphere, projection, result)")),(0,t.yg)("p",null,"Creates a bounding sphere in 2D from a bounding sphere in 3D world coordinates."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"BoundingSphere")," sphere The bounding sphere to transform to 2D.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"Object")," ","[projection=GeographicProjection]"," The projection to 2D.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"result")," Optional object onto which to store the result."))),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The modified ",(0,t.yg)("inlineCode",{parentName:"li"},"result")," parameter or a new ",(0,t.yg)("inlineCode",{parentName:"li"},"BoundingSphere")," instance if none was provided.")),(0,t.yg)("h2",{id:"attribution"},"Attribution"),(0,t.yg)("p",null,"This class was ported from ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/AnalyticalGraphicsInc/cesium"},"Cesium")," under the Apache 2 License."))}g.isMDXComponent=!0}}]);