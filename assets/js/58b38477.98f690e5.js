"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5357],{2294:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=t(5893),i=t(1151);const s={},a="Matrix3",l={id:"modules/core/api-reference/matrix3",title:"Matrix3",description:"A 3x3 matrix. Any arguments can be plain JavaScript arrays or other math.gl objects.",source:"@site/../docs/modules/core/api-reference/matrix3.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/matrix3",permalink:"/math.gl/docs/modules/core/api-reference/matrix3",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/website/../docs/modules/core/api-reference/matrix3.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Matrix",permalink:"/math.gl/docs/modules/core/api-reference/matrix"},next:{title:"Matrix4",permalink:"/math.gl/docs/modules/core/api-reference/matrix4"}},c={},o=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor()",id:"constructor",level:3},{value:"identity(): this",id:"identity-this",level:3},{value:"set(...number): this",id:"setnumber-this",level:3},{value:"fromQuaternion(q: Quaternion): this",id:"fromquaternionq-quaternion-this",level:3},{value:"determinant(): number",id:"determinant-number",level:3},{value:"transpose(): this",id:"transpose-this",level:3},{value:"invert(): this",id:"invert-this",level:3},{value:"multiplyLeft(matrix: number[9]): this",id:"multiplyleftmatrix-number9-this",level:3},{value:"multiplyRight(matrix: number[9]): this",id:"multiplyrightmatrix-number9-this",level:3},{value:"rotate(): this",id:"rotate-this",level:3},{value:"scale(factor: number[2]): this",id:"scalefactor-number2-this",level:3},{value:"translate(offset: number[2]): this",id:"translateoffset-number2-this",level:3},{value:"transformVector()",id:"transformvector",level:3},{value:"Remarks",id:"remarks",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"matrix3",children:"Matrix3"}),"\n",(0,n.jsxs)(r.p,{children:["A 3x3 matrix. Any arguments can be plain JavaScript arrays or other ",(0,n.jsx)(r.code,{children:"math.gl"})," objects."]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"import {Matrix3} from `math.gl`;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Copy a matrix to a ",(0,n.jsx)(r.code,{children:"Matrix3"})," so that it can be manipulated (and mutated) with ",(0,n.jsx)(r.code,{children:"Matrix3"})," methods:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const IDENTITY = [1, 0, ..., 1];\nconst m = new Matrix3(IDENTITY).translate([1, 0]);\n"})}),"\n",(0,n.jsx)(r.p,{children:"Invert a matrix"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const inverse = matrix.invert();\n"})}),"\n",(0,n.jsx)(r.p,{children:"Transform a vector as a point (including translations)"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const transform = new Matrix3();\nconst vector2 = transform.transformPoint([1, 2]);\nconst vector3 = transform.transformPoint([1, 2, 1]);\n"})}),"\n",(0,n.jsx)(r.p,{children:"Transform a vector as a direction (NOT including translations)"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const transform = new Matrix3();\nconst vector2 = transform.transformDirection([1, 2]);\nconst vector3 = transform.transformDirection([1, 2, 1]);\n"})}),"\n",(0,n.jsx)(r.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"class Matrix3 extends [Matrix](./docs/api-reference/matrix) extends [MathArray](./docs/api-reference/math-array) extends [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)"})}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsxs)(r.p,{children:["Many of the most commonly used methods are inherited from ",(0,n.jsx)(r.a,{href:"/math.gl/docs/modules/core/api-reference/math-array",children:(0,n.jsx)(r.code,{children:"MathArray"})}),":"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.clone()"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.copy(array)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.set(...args)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.fromArray(array, offset = 0)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.toString()"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.toArray(array = [], offset = 0)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.equals(array)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.exactEquals(array)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.validate(array = this)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.check(array = this)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"matrix3.normalize()"})}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Note that ",(0,n.jsx)(r.code,{children:"Matrix3"})," is a subclass of the built in JavaScript ",(0,n.jsx)(r.code,{children:"Array"})," and can thus e.g. be supplied as a parameter to any function expecting an ",(0,n.jsx)(r.code,{children:"Array"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"constructor",children:"constructor()"}),"\n",(0,n.jsxs)(r.p,{children:["Creates an empty ",(0,n.jsx)(r.code,{children:"Matrix3"})]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"new Matrix3()"})}),"\n",(0,n.jsx)(r.h3,{id:"identity-this",children:"identity(): this"}),"\n",(0,n.jsx)(r.p,{children:"Sets the matrix to the multiplicative identity matrix."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.identity()"})}),"\n",(0,n.jsx)(r.h3,{id:"setnumber-this",children:"set(...number): this"}),"\n",(0,n.jsx)(r.p,{children:"Sets the elements of the matrix."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.set(m00, m01, m02, m10, m11, m12, m20, m21, m22)"})}),"\n",(0,n.jsx)(r.h3,{id:"fromquaternionq-quaternion-this",children:"fromQuaternion(q: Quaternion): this"}),"\n",(0,n.jsx)(r.p,{children:"Sets the matrix to a transformation corresponding to the rotations represented by the given quaternion."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.fromQuaternion(quaternion)"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"quaternion"})," (",(0,n.jsx)(r.code,{children:"Quaternion"}),") - the quaternion to create matrix from"]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"determinant-number",children:"determinant(): number"}),"\n",(0,n.jsx)(r.p,{children:"Returns the determinant of the matrix (does not modify the matrix)."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"const determinant = matrix3.determinant()"})}),"\n",(0,n.jsxs)(r.p,{children:["Returns (",(0,n.jsx)(r.code,{children:"Number"}),") - the determinant"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"If the determinant is zero, the matrix is not invertible."}),"\n",(0,n.jsx)(r.li,{children:"Determinant calculation is somewhat expensive."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"transpose-this",children:"transpose(): this"}),"\n",(0,n.jsx)(r.p,{children:"Sets this matrix to its transpose matrix."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.transpose()"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"The transpose matrix mirrors the original matrix elements in the diagonal."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"invert-this",children:"invert(): this"}),"\n",(0,n.jsx)(r.p,{children:"Sets this matrix to its inverse matrix."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.invert()"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"The inverse matrix times its original matrix is an identity matrix of the same size."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"multiplyleftmatrix-number9-this",children:"multiplyLeft(matrix: number[9]): this"}),"\n",(0,n.jsx)(r.p,{children:"Multiplies in another matrix from the left"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.multiplyLeft(matrix3)"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["When using ",(0,n.jsx)(r.code,{children:"Matrix3"})," to transform vectors, the vectors are multiplied in from the right. This means that the multiplying in a matrix from the left will cause it to be applied last during transformation (unless additional matrices are multiplied in from the left of course)."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"multiplyrightmatrix-number9-this",children:"multiplyRight(matrix: number[9]): this"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.multiplyRight(matrix3)"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["When using ",(0,n.jsx)(r.code,{children:"Matrix3"})," to transform vectors, the vectors are multiplied in from the right. This means that the multiplying in a matrix from the left will cause it to be applied last during transformation (unless additional matrices are multiplied in from the left of course)."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"rotate-this",children:"rotate(): this"}),"\n",(0,n.jsx)(r.p,{children:"Adds a rotation by the given angle. Equivalent to right multiplying the new transform into the matrix but more performant."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.rotate(radians)"})}),"\n",(0,n.jsx)(r.h3,{id:"scalefactor-number2-this",children:"scale(factor: number[2]): this"}),"\n",(0,n.jsx)(r.p,{children:"Adds a scaling transform, each axis can be scaled independently."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.scale(factor)"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"factor"})," (Number) - scale factor to be applied to each axis."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.scale([x, y])"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"x"})," (Number) - scale factor to be multiplied into x component"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"y"})," (Number) - scale factor to be multiplied into y component"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Equivalent to right multiplying the new transform into the matrix but more performant."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"During vector transformation all coordinates will be multiplied with the given factors."}),"\n",(0,n.jsxs)(r.li,{children:["Scale with ",(0,n.jsx)(r.code,{children:"-1"})," will flip the coordinate system in that axis."]}),"\n",(0,n.jsxs)(r.li,{children:["Scale with ",(0,n.jsx)(r.code,{children:"0"})," will drop that component."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"translateoffset-number2-this",children:"translate(offset: number[2]): this"}),"\n",(0,n.jsx)(r.p,{children:"Adds a translation to the matrix."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"matrix3.translate([x, y])"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"x"})," (Number) - translation to be added to the x component"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"y"})," (Number) - translation to be added to the y component"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Equivalent to right multiplying the new transform into the matrix but more performant."}),"\n",(0,n.jsx)(r.p,{children:"During vector transformation the given translation values are added to each component of the vector being transformed."}),"\n",(0,n.jsx)(r.h3,{id:"transformvector",children:"transformVector()"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"transformVector(vector, out)"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"vector"})," (",(0,n.jsx)(r.code,{children:"Array"}),"|",(0,n.jsx)(r.code,{children:"Vector2"}),"|",(0,n.jsx)(r.code,{children:"Vector3"}),")"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"out"})," - unless supplied, will be a ",(0,n.jsx)(r.code,{children:"Vector2"})," or ",(0,n.jsx)(r.code,{children:"Vector3"}),", matching the length of input vector.\nReturns ",(0,n.jsx)(r.code,{children:"out"}),", or a newly minted ",(0,n.jsx)(r.code,{children:"Vector2"})," or ",(0,n.jsx)(r.code,{children:"Vector3"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:'All transforms are effectively "right multiplied" onto the matrix (meaning that during transform they will be applied in opposite order).'}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Matrix3"})," is stored internally in column major format (per WebGL conventions). This only matters when you read out the matrix to use it with other software."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>l,a:()=>a});var n=t(7294);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);