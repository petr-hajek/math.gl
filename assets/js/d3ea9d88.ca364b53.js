"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[61],{5680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},y=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),u=s(t),c=o,d=u["".concat(p,".").concat(c)]||u[c]||g[c]||a;return t?r.createElement(d,i(i({ref:n},y),{},{components:t})):r.createElement(d,i({ref:n},y))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9106:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(8168),o=(t(6540),t(5680));const a={},i="cutPolygonByMercatorBounds",l={unversionedId:"modules/polygon/api-reference/cut-polygon-by-mercator-bounds",id:"modules/polygon/api-reference/cut-polygon-by-mercator-bounds",title:"cutPolygonByMercatorBounds",description:"Splits a geospatial polygon at the 180th meridian and the top (latitude=90) and bottom (latitude=-90) edges of the Web Mercator map.",source:"@site/../docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polygon-by-mercator-bounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"cutPolylineByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-grid"},next:{title:"cutPolylineByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds"}},p={},s=[{value:"Usage",id:"usage",level:2}],y={toc:s},u="wrapper";function g(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"cutpolygonbymercatorbounds"},"cutPolygonByMercatorBounds"),(0,o.yg)("p",{class:"badges"},(0,o.yg)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,o.yg)("p",null,"Splits a geospatial polygon at the ",(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/180th_meridian"},"180th meridian")," and the top (",(0,o.yg)("inlineCode",{parentName:"p"},"latitude=90"),") and bottom (",(0,o.yg)("inlineCode",{parentName:"p"},"latitude=-90"),") edges of the Web Mercator map."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import {cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\ncutPolygonByMercatorBounds([-170, 0, 170, 0, 170, 20, -170, 20], {size: 2});\n// returns [\n//   [170, 20, 180, 20, 180, 0, 170, 0],\n//   [-180, 20, -170, 20, -170, 0, -180, 0]\n// ]\n]\n")),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"cutPolygonByMercatorBounds(positions, holeIndices, [options]);\n")),(0,o.yg)("p",null,"Arguments:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings. ",(0,o.yg)("inlineCode",{parentName:"li"},"x")," is longitude in degrees, and ",(0,o.yg)("inlineCode",{parentName:"li"},"y")," is latitude in degrees."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"holeIndices")," (Array|TypedArray|null) - the indices in ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," where each hole starts. If ",(0,o.yg)("inlineCode",{parentName:"li"},"null"),", the polygon has no holes."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,o.yg)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,o.yg)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,o.yg)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,o.yg)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,o.yg)("inlineCode",{parentName:"li"},"2"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"normalize")," (Boolean) - make sure the output longitudes are within ",(0,o.yg)("inlineCode",{parentName:"li"},"[-180, 180]"),". Default ",(0,o.yg)("inlineCode",{parentName:"li"},"true"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"maxLatitude")," (Number) - since latitude=90 projects to infinity in Web Mercator projection, ",(0,o.yg)("inlineCode",{parentName:"li"},"maxLatitude")," will be used to represent the pole. Default ",(0,o.yg)("inlineCode",{parentName:"li"},"85.051129")," which makes the map square."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"edgeTypes")," (Boolean) - if ",(0,o.yg)("inlineCode",{parentName:"li"},"true"),', returns an additional array for each polygon that describes the nature of each vertex. See "returns" below.')))),(0,o.yg)("p",null,"Returns:"),(0,o.yg)("p",null,"An array of polygons. Each polygons is represented by an object with the following fields:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"holeIndices")," (Array|TypedArray) - the indices in ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," where each hole starts. Not present if the polygon has no holes."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"edgeTypes")," (Array) - describes the nature of each vertex in ",(0,o.yg)("inlineCode",{parentName:"li"},"positions"),":",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"0")," - the segment connecting this vertex to the next is inside the original polygon"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"1")," - the segment connecting this vertex to the next is on the border of the original polygon")))))}g.isMDXComponent=!0}}]);