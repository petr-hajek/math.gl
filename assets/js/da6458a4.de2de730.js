"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7500],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),y=s(t),m=r,d=y["".concat(u,".").concat(m)]||y[m]||g[m]||l;return t?a.createElement(d,i(i({ref:n},p),{},{components:t})):a.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[y]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(8168),r=(t(6540),t(5680));const l={},i="Quaternion",o={unversionedId:"modules/core/api-reference/quaternion",id:"modules/core/api-reference/quaternion",title:"Quaternion",description:"A class to handle Quaternions. More information on quternions can be found here. The quaternion will be represented by an instance with x, y, z, w components that make a quaternion like: xi + yj + zk + w.",source:"@site/../docs/modules/core/api-reference/quaternion.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/quaternion",permalink:"/math.gl/docs/modules/core/api-reference/quaternion",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/core/api-reference/quaternion.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Pose",permalink:"/math.gl/docs/modules/core/api-reference/pose"},next:{title:"SphericalCoordinates",permalink:"/math.gl/docs/modules/core/api-reference/spherical-coordinates"}},u={},s=[{value:"Usage",id:"usage",level:2},{value:"Members",id:"members",level:2},{value:"x, y, z, w",id:"x-y-z-w",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"fromMatrix3(m: number9): this",id:"frommatrix3m-number9-this",level:3},{value:"fromValues(x: number, y: number, z: number, w): number: this",id:"fromvaluesx-number-y-number-z-number-w-number-this",level:3},{value:"identity(): this",id:"identity-this",level:3},{value:"length(): number",id:"length-number",level:3},{value:"squaredLength(): number",id:"squaredlength-number",level:3},{value:"dot(): number",id:"dot-number",level:3},{value:"getAxisAngle",id:"getaxisangle",level:3},{value:"rotationTo",id:"rotationto",level:3},{value:"add",id:"add",level:3},{value:"calculateW",id:"calculatew",level:3},{value:"conjugate",id:"conjugate",level:3},{value:"invert(): this",id:"invert-this",level:3},{value:"lerp",id:"lerp",level:3},{value:"multiply",id:"multiply",level:3},{value:"normalize",id:"normalize",level:3},{value:"rotateX",id:"rotatex",level:3},{value:"rotateY",id:"rotatey",level:3},{value:"rotateZ",id:"rotatez",level:3},{value:"scale",id:"scale",level:3},{value:"set",id:"set",level:3},{value:"setAxisAngle",id:"setaxisangle",level:3},{value:"slerp",id:"slerp",level:3}],p={toc:s},y="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(y,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"quaternion"},"Quaternion"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"class Quaternion extends MathArray extends Array\n")),(0,r.yg)("p",null,"A class to handle Quaternions. More information on quternions can be found ",(0,r.yg)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Quaternion"},"here"),". The quaternion will be represented by an instance with ",(0,r.yg)("inlineCode",{parentName:"p"},"x"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"y"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"z"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"w")," components that make a quaternion like: ",(0,r.yg)("inlineCode",{parentName:"p"},"xi + yj + zk + w"),"."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import {Quaternion} from '@math.gl/core';\n")),(0,r.yg)("h2",{id:"members"},"Members"),(0,r.yg)("h3",{id:"x-y-z-w"},"x, y, z, w"),(0,r.yg)("p",null,"Gets or sets element 0, 1, 2 or 3 respectively"),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("p",null,"Many of the most commonly used methods are inherited from ",(0,r.yg)("a",{parentName:"p",href:"/math.gl/docs/modules/core/api-reference/math-array"},(0,r.yg)("inlineCode",{parentName:"a"},"MathArray")),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.clone()")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.copy(array)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.set(...args)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.fromArray(array, offset = 0)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.toString()")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.toArray(array = [], offset = 0)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.equals(array)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.exactEquals(array)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.validate(array = this)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.check(array = this)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"quaternion.normalize()"))),(0,r.yg)("p",null,"Note that ",(0,r.yg)("inlineCode",{parentName:"p"},"Quaternion")," is a subclass of the built in JavaScript ",(0,r.yg)("inlineCode",{parentName:"p"},"Array")," and can thus technically be supplied as a parameter to any function expecting an ",(0,r.yg)("inlineCode",{parentName:"p"},"Array"),"."),(0,r.yg)("h3",{id:"constructor"},"constructor"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"constructor(x = 0, y = 0, z = 0, w = 1)")),(0,r.yg)("h3",{id:"frommatrix3m-number9-this"},"fromMatrix3(m: number","[9]","): this"),(0,r.yg)("p",null,"Creates a quaternion from the given 3x3 rotation matrix. NOTE: The resultant quaternion is not normalized, so you should be sure to renormalize the quaternion yourself where necessary."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"fromMatrix3(m)")),(0,r.yg)("h3",{id:"fromvaluesx-number-y-number-z-number-w-number-this"},"fromValues(x: number, y: number, z: number, w): number: this"),(0,r.yg)("p",null,"Creates a new quat initialized with the given values"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"fromValues(x, y, z, w)")),(0,r.yg)("h3",{id:"identity-this"},"identity(): this"),(0,r.yg)("p",null,"Set a quat to the identity quaternion"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"identity()")),(0,r.yg)("h3",{id:"length-number"},"length(): number"),(0,r.yg)("p",null,"Calculates the length of a quaternion"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"length()")),(0,r.yg)("h3",{id:"squaredlength-number"},"squaredLength(): number"),(0,r.yg)("p",null,"Calculates the squared length of a quaternion"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"squaredLength(a)")),(0,r.yg)("p",null,"@returnNumber}"),(0,r.yg)("h3",{id:"dot-number"},"dot(): number"),(0,r.yg)("p",null,"Calculates the dot product of two quat's"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.dot(a, b)")),(0,r.yg)("h3",{id:"getaxisangle"},"getAxisAngle"),(0,r.yg)("p",null,"Gets the rotation axis and angle for a given quaternion."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.getAxisAngle()")),(0,r.yg)("p",null,"If a quaternion is created with setAxisAngle, this method will return the same values as providied in the original parameter list OR functionally equivalent values."),(0,r.yg)("p",null,"Example: The quaternion formed by axis ","[0, 0, 1]"," and angle -90 is the same as the quaternion formed by ","[0, 0, 1]"," and 270. This method favors the latter."),(0,r.yg)("h3",{id:"rotationto"},"rotationTo"),(0,r.yg)("p",null,"Sets a quaternion to represent the shortest rotation from one vector to another. Both vectors are assumed to be unit length."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.rotationTo(vectorA, vectorB)")),(0,r.yg)("h3",{id:"add"},"add"),(0,r.yg)("p",null,"Adds two quaternions"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.add(a, b)")),(0,r.yg)("h3",{id:"calculatew"},"calculateW"),(0,r.yg)("p",null,"Calculates the W component of a quat from the X, Y, and Z components. Any existing W component will be ignored."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.calculateW()")),(0,r.yg)("h3",{id:"conjugate"},"conjugate"),(0,r.yg)("p",null,"Calculates the conjugate of a quat If the quaternion is normalized, this function is faster than quat_inverse and produces the same result."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.conjugate()")),(0,r.yg)("h3",{id:"invert-this"},"invert(): this"),(0,r.yg)("p",null,"Calculates the inverse of a quat"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.invert()")),(0,r.yg)("h3",{id:"lerp"},"lerp"),(0,r.yg)("p",null,"Performs a linear interpolation between two quat's"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"quaternion.lerp(a, b, t)")),(0,r.yg)("h3",{id:"multiply"},"multiply"),(0,r.yg)("p",null,"Multiplies two quat's"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"multiply(a, b)")),(0,r.yg)("h3",{id:"normalize"},"normalize"),(0,r.yg)("p",null,"Normalize a quat"),(0,r.yg)("h3",{id:"rotatex"},"rotateX"),(0,r.yg)("p",null,"Rotates a quaternion by the given angle about the X axis"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"rotateX(rad)")),(0,r.yg)("h3",{id:"rotatey"},"rotateY"),(0,r.yg)("p",null,"Rotates a quaternion by the given angle about the Y axis"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"rotateY(rad)")),(0,r.yg)("h3",{id:"rotatez"},"rotateZ"),(0,r.yg)("p",null,"Rotates a quaternion by the given angle about the Z axis"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"rotateZ(rad)")),(0,r.yg)("h3",{id:"scale"},"scale"),(0,r.yg)("p",null,"Scales a quat by a scalar number"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"scale(b)")),(0,r.yg)("h3",{id:"set"},"set"),(0,r.yg)("p",null,"Set the components of a quat to the given values"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"set(i, j, k, l)")),(0,r.yg)("h3",{id:"setaxisangle"},"setAxisAngle"),(0,r.yg)("p",null,"Sets a quat from the given angle and rotation axis, then returns it."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"setAxisAngle(axis, rad)")),(0,r.yg)("h3",{id:"slerp"},"slerp"),(0,r.yg)("p",null,"Performs a spherical linear interpolation between two quaternions"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"slerp({start = [0, 0, 0, 1], target, ratio})")),(0,r.yg)("p",null,"s"))}g.isMDXComponent=!0}}]);