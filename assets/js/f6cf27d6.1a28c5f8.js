"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1807],{5680:(e,n,o)=>{o.d(n,{xA:()=>y,yg:()=>c});var i=o(6540);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,i)}return o}function r(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,i,t=function(e,n){if(null==e)return{};var o,i,t={},l=Object.keys(e);for(i=0;i<l.length;i++)o=l[i],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)o=l[i],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var g=i.createContext({}),p=function(e){var n=i.useContext(g),o=n;return e&&(o="function"==typeof e?e(n):r(r({},n),e)),o},y=function(e){var n=p(e.components);return i.createElement(g.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var o=e.components,t=e.mdxType,l=e.originalType,g=e.parentName,y=a(e,["components","mdxType","originalType","parentName"]),s=p(o),u=t,c=s["".concat(g,".").concat(u)]||s[u]||d[u]||l;return o?i.createElement(c,r(r({ref:n},y),{},{components:o})):i.createElement(c,r({ref:n},y))}));function c(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=o.length,r=new Array(l);r[0]=u;var a={};for(var g in n)hasOwnProperty.call(n,g)&&(a[g]=n[g]);a.originalType=e,a[s]="string"==typeof e?e:t,r[1]=a;for(var p=2;p<l;p++)r[p]=o[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,o)}u.displayName="MDXCreateElement"},3607:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var i=o(8168),t=(o(6540),o(5680));const l={},r="polygon-utils",a={unversionedId:"modules/polygon/api-reference/polygon-utils",id:"modules/polygon/api-reference/polygon-utils",title:"polygon-utils",description:"A set of polygon-related utility functions. Utility functions are available for flat arrays and for arrays of points. Note: the \\*Points set of functions is used for arrays of points, and is separated for performance and backwards compatibility reasons.",source:"@site/../docs/modules/polygon/api-reference/polygon-utils.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/polygon-utils",permalink:"/math.gl/docs/modules/polygon/api-reference/polygon-utils",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/polygon-utils.md",tags:[],version:"current",frontMatter:{}},g={},p=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"PolygonParams",id:"polygonparams",level:3},{value:"Functions",id:"functions",level:2},{value:"modifyPolygonWindingDirection",id:"modifypolygonwindingdirection",level:3},{value:"getPolygonSignedArea",id:"getpolygonsignedarea",level:3},{value:"getPolygonWindingDirection",id:"getpolygonwindingdirection",level:3},{value:"forEachSegmentInPolygon",id:"foreachsegmentinpolygon",level:3},{value:"modifyPolygonWindingDirectionPoints",id:"modifypolygonwindingdirectionpoints",level:3},{value:"getPolygonSignedAreaPoints",id:"getpolygonsignedareapoints",level:3},{value:"getPolygonWindingDirectionPoints",id:"getpolygonwindingdirectionpoints",level:3},{value:"forEachSegmentInPolygonPoints",id:"foreachsegmentinpolygonpoints",level:3}],y={toc:p},s="wrapper";function d(e){let{components:n,...o}=e;return(0,t.yg)(s,(0,i.A)({},y,o,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"polygon-utils"},"polygon-utils"),(0,t.yg)("p",null,"A set of polygon-related utility functions. Utility functions are available for flat arrays and for arrays of points. Note: the ","*","Points set of functions is used for arrays of points, and is separated for performance and backwards compatibility reasons."),(0,t.yg)("h2",{id:"usage"},"Usage"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"import {getPolygonWindingDirection} from '@math.gl/polygon';\n")),(0,t.yg)("h2",{id:"types"},"Types"),(0,t.yg)("h3",{id:"polygonparams"},"PolygonParams"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"PolygonParams")),(0,t.yg)("p",null,"Fields:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"start")," (number) - Start index of the polygon in the array of positions. Defaults to 0."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"end")," (number) - End index of the polygon in the array of positions. Defaults to number of positions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"size")," (Number) - Size of a point, 2 (XZ) or 3 (XYZ). Defaults to 2. Affects only polygons stored in flat arrays."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"isClosed")," (Boolean) - Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"plane")," ('xy' | 'yz' | 'xz') - The 2D projection plane on which to calculate the area of a 3D polygon. Default ",(0,t.yg)("inlineCode",{parentName:"li"},"'xy'"),".")),(0,t.yg)("h2",{id:"functions"},"Functions"),(0,t.yg)("h3",{id:"modifypolygonwindingdirection"},"modifyPolygonWindingDirection"),(0,t.yg)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points are modified in-place."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyPolygonWindingDirection(points, direction, params)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"direction")," (Number) - Requested winding direction. A positive 1 for clockwise, -1 for counter clockwise."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("p",null,"Returns true if the winding direction was changed."),(0,t.yg)("h3",{id:"getpolygonsignedarea"},"getPolygonSignedArea"),(0,t.yg)("p",null,"Returns signed area of the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getPolygonSignedArea(points, options, plane)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams, optional) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("p",null,"Signed area of the polygon."),(0,t.yg)("h3",{id:"getpolygonwindingdirection"},"getPolygonWindingDirection"),(0,t.yg)("p",null,"Returns winding direction of the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getPolygonWindingDirection(points, options)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array|TypedArray) - a flat array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A positive number is clockwise."),(0,t.yg)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,t.yg)("h3",{id:"foreachsegmentinpolygon"},"forEachSegmentInPolygon"),(0,t.yg)("p",null,"Calls visitor callback for each segment in the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEachSegmentInPolygon(points, (p1x, p1y, p2x, p2y, ind1, ind2) => ...), options")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - a flat array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"visitor")," (SegmentVisitorFlat) - a callback to call for each segment of the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("h3",{id:"modifypolygonwindingdirectionpoints"},"modifyPolygonWindingDirectionPoints"),(0,t.yg)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points are modified in-place."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"modifyPolygonWindingDirectionPoints(points, direction, options)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"direction")," (Number) - Requested winding direction. A positive 1 for clockwise, -1 for counter clockwise."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("p",null,"Returns true if the winding direction was changed."),(0,t.yg)("h3",{id:"getpolygonsignedareapoints"},"getPolygonSignedAreaPoints"),(0,t.yg)("p",null,"Returns signed area of the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getPolygonSignedAreaPoints(points, options)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("p",null,"Signed area of the polygon."),(0,t.yg)("h3",{id:"getpolygonwindingdirectionpoints"},"getPolygonWindingDirectionPoints"),(0,t.yg)("p",null,"Returns winding direction of the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"getPolygonWindingDirectionPoints(points, options)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")),(0,t.yg)("p",null,"Returns:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A positive number is clockwise."),(0,t.yg)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,t.yg)("h3",{id:"foreachsegmentinpolygonpoints"},"forEachSegmentInPolygonPoints"),(0,t.yg)("p",null,"Calls visitor callback for each segment in the polygon."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"forEachSegmentInPolygonPoints(points, (p1, p2, ind1, ind2) => ..., options)")),(0,t.yg)("p",null,"Arguments:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"points")," (Array[]|TypedArray[]) - an array of the points that define the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"visitor")," (SegmentVisitor) - a callback to call for each segment of the polygon."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options")," (PolygonParams) - Polygon parameters.")))}d.isMDXComponent=!0}}]);