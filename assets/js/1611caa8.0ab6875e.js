"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[327],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>u});var o=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=o.createContext({}),p=function(e){var n=o.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(g.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(t),y=r,u=d["".concat(g,".").concat(y)]||d[y]||s[y]||i;return t?o.createElement(u,l(l({ref:n},c),{},{components:t})):o.createElement(u,l({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=y;var a={};for(var g in n)hasOwnProperty.call(n,g)&&(a[g]=n[g]);a.originalType=e,a[d]="string"==typeof e?e:r,l[1]=a;for(var p=2;p<i;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6715:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=t(8168),r=(t(6540),t(5680));const i={},l="Polygon",a={unversionedId:"modules/polygon/api-reference/polygon",id:"modules/polygon/api-reference/polygon",title:"Polygon",description:"Allows an array of points (whether closed or non-closed) to be treated as a Polygon.",source:"@site/../docs/modules/polygon/api-reference/polygon.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/polygon",permalink:"/math.gl/docs/modules/polygon/api-reference/polygon",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/polygon.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"cutPolylineByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds"},next:{title:"Overview",permalink:"/math.gl/docs/modules/proj4/"}},g={},p=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"getSignedArea",id:"getsignedarea",level:3},{value:"getArea",id:"getarea",level:3},{value:"getWindingDirection",id:"getwindingdirection",level:3},{value:"forEachSegment",id:"foreachsegment",level:3},{value:"modifyWindingDirection",id:"modifywindingdirection",level:3},{value:"Remarks",id:"remarks",level:2}],c={toc:p},d="wrapper";function s(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"polygon"},"Polygon"),(0,r.yg)("p",null,"Allows an array of points (whether closed or non-closed) to be treated as a Polygon."),(0,r.yg)("p",null,"Implements the ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Shoelace_formula"},"Shoelace formula")," for determining the area and winding direction of an arbitrary polygon."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import {Polygon} from '@math.gl/polygon';\n")),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"constructor"},"constructor"),(0,r.yg)("p",null,"Creates a new Polygon object."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"The polygon object will reference the provided points, assuming them to not be modified for the lifetime of the Polygon object.")),(0,r.yg)("h3",{id:"getsignedarea"},"getSignedArea"),(0,r.yg)("p",null,"Returns the area with a sign indicating the winding direction."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"polygon.getSignedArea()")),(0,r.yg)("h3",{id:"getarea"},"getArea"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"polygon.getArea()")),(0,r.yg)("p",null,"Note:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A convenience method that returns ",(0,r.yg)("inlineCode",{parentName:"li"},"Math.abs(polygon.getSignedArea())"),".")),(0,r.yg)("h3",{id:"getwindingdirection"},"getWindingDirection"),(0,r.yg)("p",null,"Returns the direction of the polygon path."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"polygon.getWindingDirection()")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A positive number is clockwise."),(0,r.yg)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,r.yg)("p",null,"Note:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A convenience method that returns ",(0,r.yg)("inlineCode",{parentName:"li"},"Math.sign(polygon.getSignedArea())"))),(0,r.yg)("h3",{id:"foreachsegment"},"forEachSegment"),(0,r.yg)("p",null,"Lets the application iterate over each segment."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"polygon.forEachSegment((p1, p2) => ...);")),(0,r.yg)("h3",{id:"modifywindingdirection"},"modifyWindingDirection"),(0,r.yg)("p",null,"Checks winding direction of the polygon and reverses the polygon in case if opposite winding direction. Note: points of the polygon are modified in-place."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A positive number is clockwise."),(0,r.yg)("li",{parentName:"ul"},"A negative number is counter clockwise.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"polygon.modifyWindingDirection(direction);")),(0,r.yg)("p",null,"Returns:"),(0,r.yg)("p",null,"Returns true if the winding direction was changed."),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To avoid having to copy a non-closed path to be able to treat it as a polygon (by adding a copy of the first vertex to then end of the path),\ninstead we define a ",(0,r.yg)("inlineCode",{parentName:"li"},"forEachSegment")," iteration method that makes sure the last segment is iterated over.")))}s.isMDXComponent=!0}}]);