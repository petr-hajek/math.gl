"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[111],{5680:(e,n,l)=>{l.d(n,{xA:()=>c,yg:()=>d});var i=l(6540);function t(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function r(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,i)}return l}function o(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?r(Object(l),!0).forEach((function(n){t(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function u(e,n){if(null==e)return{};var l,i,t=function(e,n){if(null==e)return{};var l,i,t={},r=Object.keys(e);for(i=0;i<r.length;i++)l=r[i],n.indexOf(l)>=0||(t[l]=e[l]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)l=r[i],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(t[l]=e[l])}return t}var a=i.createContext({}),s=function(e){var n=i.useContext(a),l=n;return e&&(l="function"==typeof e?e(n):o(o({},n),e)),l},c=function(e){var n=s(e.components);return i.createElement(a.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var l=e.components,t=e.mdxType,r=e.originalType,a=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(l),g=t,d=m["".concat(a,".").concat(g)]||m[g]||p[g]||r;return l?i.createElement(d,o(o({ref:n},c),{},{components:l})):i.createElement(d,o({ref:n},c))}));function d(e,n){var l=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=l.length,o=new Array(r);o[0]=g;var u={};for(var a in n)hasOwnProperty.call(n,a)&&(u[a]=n[a]);u.originalType=e,u[m]="string"==typeof e?e:t,o[1]=u;for(var s=2;s<r;s++)o[s]=l[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,l)}g.displayName="MDXCreateElement"},6794:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>s});var i=l(8168),t=(l(6540),l(5680));const r={},o="CullingVolume",u={unversionedId:"modules/culling/api-reference/culling-volume",id:"modules/culling/api-reference/culling-volume",title:"CullingVolume",description:"A culling volume defined by planes.",source:"@site/../docs/modules/culling/api-reference/culling-volume.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/culling-volume",permalink:"/math.gl/docs/modules/culling/api-reference/culling-volume",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/culling/api-reference/culling-volume.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"BoundingVolume (Interface)",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-volume"},next:{title:"OrientedBoundingBox",permalink:"/math.gl/docs/modules/culling/api-reference/oriented-bounding-box"}},a={},s=[{value:"Static Members",id:"static-members",level:2},{value:"CullingVolume.MASK_OUTSIDE",id:"cullingvolumemask_outside",level:3},{value:"CullingVolume.MASK_INSIDE",id:"cullingvolumemask_inside",level:3},{value:"CullingVolume.MASK_INDETERMINATE",id:"cullingvolumemask_indeterminate",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor([planes : Plane[]])",id:"constructorplanes--plane",level:3},{value:"fromBoundingSphere(boundingSphere : BoundingSphere)",id:"fromboundingsphereboundingsphere--boundingsphere",level:3},{value:"computeVisibility(boundingVolume : Object) : Interset",id:"computevisibilityboundingvolume--object--interset",level:3},{value:"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number",id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number",level:3},{value:"Attribution",id:"attribution",level:2}],c={toc:s},m="wrapper";function p(e){let{components:n,...l}=e;return(0,t.yg)(m,(0,i.A)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"cullingvolume"},"CullingVolume"),(0,t.yg)("p",null,"A culling volume defined by planes."),(0,t.yg)("h2",{id:"static-members"},"Static Members"),(0,t.yg)("h3",{id:"cullingvolumemask_outside"},"CullingVolume.MASK_OUTSIDE"),(0,t.yg)("p",null,"For plane masks (as used in ",(0,t.yg)("inlineCode",{parentName:"p"},"CullingVolume#computeVisibilityWithPlaneMask"),"), this special value represents the case where the object bounding volume is entirely outside the culling volume."),(0,t.yg)("h3",{id:"cullingvolumemask_inside"},"CullingVolume.MASK_INSIDE"),(0,t.yg)("p",null,"For plane masks (as used in ",(0,t.yg)("inlineCode",{parentName:"p"},"CullingVolume.computeVisibilityWithPlaneMask"),"), this value represents the case where the object bounding volume is entirely inside the culling volume."),(0,t.yg)("h3",{id:"cullingvolumemask_indeterminate"},"CullingVolume.MASK_INDETERMINATE"),(0,t.yg)("p",null,"For plane masks (as used in",(0,t.yg)("inlineCode",{parentName:"p"},"CullingVolume.computeVisibilityWithPlaneMask"),"), this value represents the case where the object bounding volume (may) intersect all planes of the culling volume."),(0,t.yg)("h2",{id:"methods"},"Methods"),(0,t.yg)("h3",{id:"constructorplanes--plane"},"constructor([planes : Plane[]])"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"planes"),"=",(0,t.yg)("inlineCode",{parentName:"li"},"[]")," An array of clipping planes.")),(0,t.yg)("p",null,"Each plane is represented by a Cartesian4 object, where the x, y, and z components define the unit vector normal to the plane, and the w component is the distance of the plane from the origin."),(0,t.yg)("h3",{id:"fromboundingsphereboundingsphere--boundingsphere"},"fromBoundingSphere(boundingSphere : BoundingSphere)"),(0,t.yg)("p",null,"Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere. The planes are aligned to the x, y, and z axes in world coordinates."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"boundingSphere")," The bounding sphere used to create the culling volume.")),(0,t.yg)("h3",{id:"computevisibilityboundingvolume--object--interset"},"computeVisibility(boundingVolume : Object) : Interset"),(0,t.yg)("p",null,"Determines whether a bounding volume intersects the culling volume."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"boundingVolume")," The bounding volume whose intersection with the culling volume is to be tested.")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.OUTSIDE"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.INTERSECTING"),", or ",(0,t.yg)("inlineCode",{parentName:"li"},"INTERSECTION.INSIDE"),".")),(0,t.yg)("h3",{id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number"},"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number"),(0,t.yg)("p",null,"Determines whether a bounding volume intersects the culling volume."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"boundingVolume")," The bounding volume whose intersection with the culling volume is to be tested."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"parentPlaneMask")," A bit mask from the boundingVolume's parent's check against the same culling volume, such that if ",(0,t.yg)("inlineCode",{parentName:"li"},"planeMask & (1 << planeIndex) === 0"),", for ",(0,t.yg)("inlineCode",{parentName:"li"},"k < 31"),", then the parent (and therefore this) volume is completely inside ",(0,t.yg)("inlineCode",{parentName:"li"},"plane[planeIndex]")," and that plane check can be skipped.")),(0,t.yg)("p",null,"Returns"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A plane mask as described above (which can be applied to this boundingVolume's children).")),(0,t.yg)("h2",{id:"attribution"},"Attribution"),(0,t.yg)("p",null,"This class was ported from ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/AnalyticalGraphicsInc/cesium"},"Cesium")," under the Apache 2 License."))}p.isMDXComponent=!0}}]);