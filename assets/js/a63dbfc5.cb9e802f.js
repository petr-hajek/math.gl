"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6367],{2001:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>a,frontMatter:()=>t,metadata:()=>u,toc:()=>c});var l=i(5893),s=i(1151);const t={},o="CullingVolume",u={id:"modules/culling/api-reference/culling-volume",title:"CullingVolume",description:"A culling volume defined by planes.",source:"@site/../docs/modules/culling/api-reference/culling-volume.md",sourceDirName:"modules/culling/api-reference",slug:"/modules/culling/api-reference/culling-volume",permalink:"/math.gl/docs/modules/culling/api-reference/culling-volume",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/website/../docs/modules/culling/api-reference/culling-volume.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BoundingVolume (Interface)",permalink:"/math.gl/docs/modules/culling/api-reference/bounding-volume"},next:{title:"OrientedBoundingBox",permalink:"/math.gl/docs/modules/culling/api-reference/oriented-bounding-box"}},r={},c=[{value:"Static Members",id:"static-members",level:2},{value:"CullingVolume.MASK_OUTSIDE",id:"cullingvolumemask_outside",level:3},{value:"CullingVolume.MASK_INSIDE",id:"cullingvolumemask_inside",level:3},{value:"CullingVolume.MASK_INDETERMINATE",id:"cullingvolumemask_indeterminate",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor([planes : Plane[]])",id:"constructorplanes--plane",level:3},{value:"fromBoundingSphere(boundingSphere : BoundingSphere)",id:"fromboundingsphereboundingsphere--boundingsphere",level:3},{value:"computeVisibility(boundingVolume : Object) : Interset",id:"computevisibilityboundingvolume--object--interset",level:3},{value:"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number",id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number",level:3},{value:"Attribution",id:"attribution",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"cullingvolume",children:"CullingVolume"}),"\n",(0,l.jsx)(n.p,{children:"A culling volume defined by planes."}),"\n",(0,l.jsx)(n.h2,{id:"static-members",children:"Static Members"}),"\n",(0,l.jsx)(n.h3,{id:"cullingvolumemask_outside",children:"CullingVolume.MASK_OUTSIDE"}),"\n",(0,l.jsxs)(n.p,{children:["For plane masks (as used in ",(0,l.jsx)(n.code,{children:"CullingVolume#computeVisibilityWithPlaneMask"}),"), this special value represents the case where the object bounding volume is entirely outside the culling volume."]}),"\n",(0,l.jsx)(n.h3,{id:"cullingvolumemask_inside",children:"CullingVolume.MASK_INSIDE"}),"\n",(0,l.jsxs)(n.p,{children:["For plane masks (as used in ",(0,l.jsx)(n.code,{children:"CullingVolume.computeVisibilityWithPlaneMask"}),"), this value represents the case where the object bounding volume is entirely inside the culling volume."]}),"\n",(0,l.jsx)(n.h3,{id:"cullingvolumemask_indeterminate",children:"CullingVolume.MASK_INDETERMINATE"}),"\n",(0,l.jsxs)(n.p,{children:["For plane masks (as used in",(0,l.jsx)(n.code,{children:"CullingVolume.computeVisibilityWithPlaneMask"}),"), this value represents the case where the object bounding volume (may) intersect all planes of the culling volume."]}),"\n",(0,l.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h3,{id:"constructorplanes--plane",children:"constructor([planes : Plane[]])"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"planes"}),"=",(0,l.jsx)(n.code,{children:"[]"})," An array of clipping planes."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Each plane is represented by a Cartesian4 object, where the x, y, and z components define the unit vector normal to the plane, and the w component is the distance of the plane from the origin."}),"\n",(0,l.jsx)(n.h3,{id:"fromboundingsphereboundingsphere--boundingsphere",children:"fromBoundingSphere(boundingSphere : BoundingSphere)"}),"\n",(0,l.jsx)(n.p,{children:"Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere. The planes are aligned to the x, y, and z axes in world coordinates."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"boundingSphere"})," The bounding sphere used to create the culling volume."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"computevisibilityboundingvolume--object--interset",children:"computeVisibility(boundingVolume : Object) : Interset"}),"\n",(0,l.jsx)(n.p,{children:"Determines whether a bounding volume intersects the culling volume."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"boundingVolume"})," The bounding volume whose intersection with the culling volume is to be tested."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Returns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"INTERSECTION.OUTSIDE"}),", ",(0,l.jsx)(n.code,{children:"INTERSECTION.INTERSECTING"}),", or ",(0,l.jsx)(n.code,{children:"INTERSECTION.INSIDE"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"computevisibilitywithplanemaskboundingvolume--object-parentplanemask--number--number",children:"computeVisibilityWithPlaneMask(boundingVolume : Object, parentPlaneMask : Number) : Number"}),"\n",(0,l.jsx)(n.p,{children:"Determines whether a bounding volume intersects the culling volume."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"boundingVolume"})," The bounding volume whose intersection with the culling volume is to be tested."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"parentPlaneMask"})," A bit mask from the boundingVolume's parent's check against the same culling volume, such that if ",(0,l.jsx)(n.code,{children:"planeMask & (1 << planeIndex) === 0"}),", for ",(0,l.jsx)(n.code,{children:"k < 31"}),", then the parent (and therefore this) volume is completely inside ",(0,l.jsx)(n.code,{children:"plane[planeIndex]"})," and that plane check can be skipped."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Returns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A plane mask as described above (which can be applied to this boundingVolume's children)."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"attribution",children:"Attribution"}),"\n",(0,l.jsxs)(n.p,{children:["This class was ported from ",(0,l.jsx)(n.a,{href:"https://github.com/AnalyticalGraphicsInc/cesium",children:"Cesium"})," under the Apache 2 License."]})]})}function a(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>u,a:()=>o});var l=i(7294);const s={},t=l.createContext(s);function o(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);