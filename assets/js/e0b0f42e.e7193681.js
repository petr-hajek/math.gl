"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5459],{5680:(e,r,t)=>{t.d(r,{xA:()=>y,yg:()=>d});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=a.createContext({}),u=function(e){var r=a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},y=function(e){var r=u(e.components);return a.createElement(p.Provider,{value:r},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},c=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),m=u(t),c=n,d=m["".concat(p,".").concat(c)]||m[c]||g[c]||l;return t?a.createElement(d,o(o({ref:r},y),{},{components:t})):a.createElement(d,o({ref:r},y))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=c;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1373:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=t(8168),n=(t(6540),t(5680));const l={},o="Euler",i={unversionedId:"modules/core/api-reference/euler",id:"modules/core/api-reference/euler",title:"Euler",description:"A class to handle Euler rotation. More information on rotation using a Euler vector can be found here. Generally speaking the three components of the Euler object represents the roll, pitch and yaw angles and the rotation is applied according to a specific rotation order.",source:"@site/../docs/modules/core/api-reference/euler.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/euler",permalink:"/math.gl/docs/modules/core/api-reference/euler",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/core/api-reference/euler.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/math.gl/docs/modules/core/"},next:{title:"MathArray",permalink:"/math.gl/docs/modules/core/api-reference/math-array"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Constants",id:"constants",level:2},{value:"Members",id:"members",level:2},{value:"x, y z",id:"x-y-z",level:3},{value:"roll, pitch, yaw",id:"roll-pitch-yaw",level:3},{value:"alpha, beta, gamma",id:"alpha-beta-gamma",level:3},{value:"phi, theta, psi",id:"phi-theta-psi",level:3},{value:"order",id:"order",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"fromRollPitchYaw",id:"fromrollpitchyaw",level:3},{value:"fromRotationMatrix",id:"fromrotationmatrix",level:3},{value:"fromQuaternion",id:"fromquaternion",level:3},{value:"copy",id:"copy",level:3},{value:"set",id:"set",level:3},{value:"toArray",id:"toarray",level:3},{value:"toArray4",id:"toarray4",level:3},{value:"toVector3",id:"tovector3",level:3},{value:"fromVector3",id:"fromvector3",level:3},{value:"fromArray",id:"fromarray",level:3},{value:"getRotationMatrix",id:"getrotationmatrix",level:3},{value:"getQuaternion",id:"getquaternion",level:3},{value:"Remarks",id:"remarks",level:2}],y={toc:u},m="wrapper";function g(e){let{components:r,...t}=e;return(0,n.yg)(m,(0,a.A)({},y,t,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"euler"},"Euler"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-js"},"class Euler extends MathArray extends Array\n")),(0,n.yg)("p",null,"A class to handle Euler rotation. More information on rotation using a Euler vector can be found ",(0,n.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euler%27s_rotation_theorem"},"here"),". Generally speaking the three components of the Euler object represents the roll, pitch and yaw angles and the rotation is applied according to a specific rotation order."),(0,n.yg)("h2",{id:"usage"},"Usage"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-js"},"import {Euler} from '@math.gl/core';\n")),(0,n.yg)("h2",{id:"constants"},"Constants"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.ZYX"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.YXZ"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.XZY"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.ZXY"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.YZX"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.XYZ"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.RollPitchYaw"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.DefaultOrder")," (= ",(0,n.yg)("inlineCode",{parentName:"p"},"Euler.ZYX"),")")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"Euler.RotationOrders")," = ",(0,n.yg)("inlineCode",{parentName:"p"},"['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ']"),";"))),(0,n.yg)("h2",{id:"members"},"Members"),(0,n.yg)("h3",{id:"x-y-z"},"x, y z"),(0,n.yg)("p",null,"x, y, z angle notation (note: only corresponds to axis in XYZ orientation)"),(0,n.yg)("h3",{id:"roll-pitch-yaw"},"roll, pitch, yaw"),(0,n.yg)("p",null,"roll, pitch, yaw angle notation"),(0,n.yg)("h3",{id:"alpha-beta-gamma"},"alpha, beta, gamma"),(0,n.yg)("p",null,"alpha, beta, gamma angle notation"),(0,n.yg)("h3",{id:"phi-theta-psi"},"phi, theta, psi"),(0,n.yg)("p",null,"phi, theta, psi angle notation"),(0,n.yg)("h3",{id:"order"},"order"),(0,n.yg)("p",null,"rotation order in all notations"),(0,n.yg)("h2",{id:"methods"},"Methods"),(0,n.yg)("h3",{id:"constructor"},"constructor"),(0,n.yg)("p",null,"(x = 0, y = 0, z = 0, order = Euler.DefaultOrder)"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Number|Number[], Number, Number, Number")),(0,n.yg)("h3",{id:"fromrollpitchyaw"},"fromRollPitchYaw"),(0,n.yg)("p",null,"Common ZYX rotation order"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.fromRollPitchYaw(roll, pitch, yaw)")),(0,n.yg)("h3",{id:"fromrotationmatrix"},"fromRotationMatrix"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.fromRotationMatrix(m, order = Euler.DefaultOrder)")),(0,n.yg)("h3",{id:"fromquaternion"},"fromQuaternion"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.fromQuaternion(q, order)")),(0,n.yg)("h3",{id:"copy"},"copy"),(0,n.yg)("p",null,"If copied array does contain fourth element, preserves currently set order."),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.copy(array)")),(0,n.yg)("h3",{id:"set"},"set"),(0,n.yg)("p",null,"Sets the three angles, and optionally sets the rotation order. If order is not specified, preserves currently set order."),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.set(x = 0, y = 0, z = 0, order)")),(0,n.yg)("h3",{id:"toarray"},"toArray"),(0,n.yg)("p",null,"Does not copy the orientation element"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.toArray(array = [], offset = 0)")),(0,n.yg)("h3",{id:"toarray4"},"toArray4"),(0,n.yg)("p",null,"Copies the orientation element"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.toArray4(array = [], offset = 0)")),(0,n.yg)("h3",{id:"tovector3"},"toVector3"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.toVector3(optionalResult)")),(0,n.yg)("h3",{id:"fromvector3"},"fromVector3"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.fromVector3(v, order)")),(0,n.yg)("h3",{id:"fromarray"},"fromArray"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.fromArray(array, offset = 0)")),(0,n.yg)("h3",{id:"getrotationmatrix"},"getRotationMatrix"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.getRotationMatrix(m = new Matrix4())")),(0,n.yg)("p",null,"Returns ",(0,n.yg)("inlineCode",{parentName:"p"},"Matrix4")," - a rotation matrix corresponding to rotations per the specified euler angles"),(0,n.yg)("h3",{id:"getquaternion"},"getQuaternion"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"euler.getQuaternion()")),(0,n.yg)("h2",{id:"remarks"},"Remarks"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Attribution: inspired by THREE.js ",(0,n.yg)("inlineCode",{parentName:"li"},"THREE.Euler")," class")))}g.isMDXComponent=!0}}]);