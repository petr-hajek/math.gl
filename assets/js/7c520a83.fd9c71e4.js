"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9790],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>c});var i=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),y=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=y(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=y(t),d=r,c=u["".concat(p,".").concat(d)]||u[d]||g[d]||o;return t?i.createElement(c,l(l({ref:n},s),{},{components:t})):i.createElement(c,l({ref:n},s))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[u]="string"==typeof e?e:r,l[1]=a;for(var y=2;y<o;y++)l[y]=t[y];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>y});var i=t(8168),r=(t(6540),t(5680));const o={},l="cutPolylineByGrid",a={unversionedId:"modules/polygon/api-reference/cut-polyline-by-grid",id:"modules/polygon/api-reference/cut-polyline-by-grid",title:"cutPolylineByGrid",description:"Subdivides a polyline by intersecting with a uniform grid.",source:"@site/../docs/modules/polygon/api-reference/cut-polyline-by-grid.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polyline-by-grid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-grid",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/cut-polyline-by-grid.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"cutPolygonByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-grid"},next:{title:"cutPolygonByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds"}},p={},y=[{value:"Usage",id:"usage",level:2}],s={toc:y},u="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"cutpolylinebygrid"},"cutPolylineByGrid"),(0,r.yg)("p",{class:"badges"},(0,r.yg)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,r.yg)("p",null,"Subdivides a polyline by intersecting with a uniform grid."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import {cutPolylineByGrid} from '@math.gl/polygon';\n\ncutPolylineByGrid([-10, -10, 10, 10, 30, -10], {size: 2, gridResolution: 10});\n// returns [-10, -10, 0, 0, 10, 10, 20, 0, 30, -10]\n")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"cutPolylineByGrid(positions, [options]);\n")),(0,r.yg)("p",null,"Arguments:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polyline."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,r.yg)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,r.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.yg)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,r.yg)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,r.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,r.yg)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,r.yg)("inlineCode",{parentName:"li"},"2"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"startIndex")," (Number, optional) - the index in ",(0,r.yg)("inlineCode",{parentName:"li"},"positions")," to start reading vertices. Default ",(0,r.yg)("inlineCode",{parentName:"li"},"0"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"endIndex")," (Number, optional) - the index in ",(0,r.yg)("inlineCode",{parentName:"li"},"positions")," to stop reading vertices. Default ",(0,r.yg)("inlineCode",{parentName:"li"},"positions.length"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"gridResolution")," (Number, optional) - the grid size. Default ",(0,r.yg)("inlineCode",{parentName:"li"},"10"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"gridOffset")," (Array, optional) - the grid offset in ",(0,r.yg)("inlineCode",{parentName:"li"},"[x, y]"),". Default ",(0,r.yg)("inlineCode",{parentName:"li"},"[0, 0]")," i.e. the grid starts from the coordinate origin."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"broken")," (Boolean, optional) - if ",(0,r.yg)("inlineCode",{parentName:"li"},"true"),", the polyline is broken into multiple polylines at the subdivision points. If ",(0,r.yg)("inlineCode",{parentName:"li"},"false"),", subdivision points are inserted into the original polyline. Default ",(0,r.yg)("inlineCode",{parentName:"li"},"false"),".")))),(0,r.yg)("p",null,"Returns:"),(0,r.yg)("p",null,"A polyline or an array of polylines, depending on the ",(0,r.yg)("inlineCode",{parentName:"p"},"broken")," option. Each polyline is represented by a positions array that uses the same vertex size as the input."))}g.isMDXComponent=!0}}]);