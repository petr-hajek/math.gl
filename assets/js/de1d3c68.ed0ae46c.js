"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9137],{5680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>m});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},y=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,m=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return t?r.createElement(m,a(a({ref:n},y),{},{components:t})):r.createElement(m,a({ref:n},y))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9322:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(8168),o=(t(6540),t(5680));const i={},a="cutPolylineByMercatorBounds",l={unversionedId:"modules/polygon/api-reference/cut-polyline-by-mercator-bounds",id:"modules/polygon/api-reference/cut-polyline-by-mercator-bounds",title:"cutPolylineByMercatorBounds",description:"Splits a geospatial polyline at the 180th meridian.",source:"@site/../docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polyline-by-mercator-bounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/cut-polyline-by-mercator-bounds.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"cutPolygonByMercatorBounds",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-mercator-bounds"},next:{title:"Polygon",permalink:"/math.gl/docs/modules/polygon/api-reference/polygon"}},p={},s=[{value:"Usage",id:"usage",level:2}],y={toc:s},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"cutpolylinebymercatorbounds"},"cutPolylineByMercatorBounds"),(0,o.yg)("p",{class:"badges"},(0,o.yg)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,o.yg)("p",null,"Splits a geospatial polyline at the ",(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/180th_meridian"},"180th meridian"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import {cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\ncutPolylineByMercatorBounds([-10, -10, 10, 10, 30, -10], {size: 2, gridResolution: 10});\n// returns [-10, -10, 0, 0, 10, 10, 20, 0, 30, -10]\n")),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"cutPolylineByMercatorBounds(positions, [options]);\n")),(0,o.yg)("p",null,"Arguments:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polyline. ",(0,o.yg)("inlineCode",{parentName:"li"},"x")," is longitude in degrees, and ",(0,o.yg)("inlineCode",{parentName:"li"},"y")," is latitude in degrees."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,o.yg)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,o.yg)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,o.yg)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,o.yg)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,o.yg)("inlineCode",{parentName:"li"},"2"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"startIndex")," (Number, optional) - the index in ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," to start reading vertices. Default ",(0,o.yg)("inlineCode",{parentName:"li"},"0"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"endIndex")," (Number, optional) - the index in ",(0,o.yg)("inlineCode",{parentName:"li"},"positions")," to stop reading vertices. Default ",(0,o.yg)("inlineCode",{parentName:"li"},"positions.length"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"normalize")," (Boolean) - make sure the output longitudes are within ",(0,o.yg)("inlineCode",{parentName:"li"},"[-180, 180]"),". Default ",(0,o.yg)("inlineCode",{parentName:"li"},"true"),".")))),(0,o.yg)("p",null,"Returns:"),(0,o.yg)("p",null,"An array of polylines. Each polyline is represented by a positions array that uses the same vertex size as the input."))}c.isMDXComponent=!0}}]);