"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[44],{5680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>y});var l=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,l,r=function(e,n){if(null==e)return{};var a,l,r={},t=Object.keys(e);for(l=0;l<t.length;l++)a=t[l],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(l=0;l<t.length;l++)a=t[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=l.createContext({}),u=function(e){var n=l.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=u(e.components);return l.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(a),d=r,y=p["".concat(s,".").concat(d)]||p[d]||g[d]||t;return a?l.createElement(y,i(i({ref:n},c),{},{components:a})):l.createElement(y,i({ref:n},c))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var t=a.length,i=new Array(t);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<t;u++)i[u]=a[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},852:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>t,metadata:()=>o,toc:()=>u});var l=a(8168),r=(a(6540),a(5680));const t={},i="Math Utility Functions",o={unversionedId:"modules/core/api-reference/utilities",id:"modules/core/api-reference/utilities",title:"Math Utility Functions",description:"GLSL math function equivalents. Work on both single values and vectors.",source:"@site/../docs/modules/core/api-reference/utilities.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/utilities",permalink:"/math.gl/docs/modules/core/api-reference/utilities",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/core/api-reference/utilities.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"SphericalCoordinates",permalink:"/math.gl/docs/modules/core/api-reference/spherical-coordinates"},next:{title:"Vector",permalink:"/math.gl/docs/modules/core/api-reference/vector"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"configure",id:"configure",level:3},{value:"checkNumber",id:"checknumber",level:3},{value:"formatValue",id:"formatvalue",level:3},{value:"isArray",id:"isarray",level:3},{value:"clone",id:"clone",level:3},{value:"toRadians",id:"toradians",level:3},{value:"toDegrees",id:"todegrees",level:3},{value:"equals",id:"equals",level:3},{value:"exactEquals",id:"exactequals",level:3},{value:"GLSL equivalents",id:"glsl-equivalents",level:2},{value:"radians",id:"radians",level:3},{value:"degrees",id:"degrees",level:3},{value:"sin",id:"sin",level:3},{value:"cos",id:"cos",level:3},{value:"tan",id:"tan",level:3},{value:"asin",id:"asin",level:3},{value:"acos",id:"acos",level:3},{value:"atan",id:"atan",level:3},{value:"clamp",id:"clamp",level:3},{value:"Remarks",id:"remarks",level:2}],c={toc:u},p="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,l.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"math-utility-functions"},"Math Utility Functions"),(0,r.yg)("p",null,"GLSL math function equivalents. Work on both single values and vectors."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import {config, equals} from '@math.gl/core';\n")),(0,r.yg)("p",null,"Setting configuration"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import {config} from '@math.gl/core';\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.printRowMajor = true;\nconfig.precision = 4;\n")),(0,r.yg)("h2",{id:"functions"},"Functions"),(0,r.yg)("h3",{id:"configure"},"configure"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"configure(options)")),(0,r.yg)("h3",{id:"checknumber"},"checkNumber"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"checkNumber(value)")),(0,r.yg)("h3",{id:"formatvalue"},"formatValue"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"formatValue(value, precision = config.precision || 4)")),(0,r.yg)("h3",{id:"isarray"},"isArray"),(0,r.yg)("p",null,"Returns true if value is either an array or a typed array"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"isArray(value)")),(0,r.yg)("p",null,"Note: does not return true for ArrayBuffers and DataViews"),(0,r.yg)("h3",{id:"clone"},"clone"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"clone(array)If the array has a clone function, calls it, otherwise returns a copy")),(0,r.yg)("h3",{id:"toradians"},"toRadians"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"toRadians(degrees)")),(0,r.yg)("p",null,"Works on single values and vectors"),(0,r.yg)("h3",{id:"todegrees"},"toDegrees"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"toDegrees(radians)")),(0,r.yg)("p",null,"Works on single values and vectors"),(0,r.yg)("h3",{id:"equals"},"equals"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"equals(a, b, epsilon)")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Works on single values and vectors"),(0,r.yg)("li",{parentName:"ul"},"Numeric values need to be closer than ",(0,r.yg)("inlineCode",{parentName:"li"},"config.EPSILON")),(0,r.yg)("li",{parentName:"ul"},"Objects will be compared with their ",(0,r.yg)("inlineCode",{parentName:"li"},".equals()")," method if present.")),(0,r.yg)("h3",{id:"exactequals"},"exactEquals"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"exactEquals(a, b)")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Works on single values and vectors."),(0,r.yg)("li",{parentName:"ul"},"Numeric values need to be exactly identical"),(0,r.yg)("li",{parentName:"ul"},"Objects will be compared with their ",(0,r.yg)("inlineCode",{parentName:"li"},".exactEquals()")," method if present.")),(0,r.yg)("h2",{id:"glsl-equivalents"},"GLSL equivalents"),(0,r.yg)("h3",{id:"radians"},"radians"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"radians(degrees)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"degrees"},"degrees"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"degrees(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"sin"},"sin"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"sin(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"cos"},"cos"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"cos(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"tan"},"tan"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"tan(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"asin"},"asin"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"asin(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"acos"},"acos"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"acos(radians)")),(0,r.yg)("p",null,"GLSL equivalent: Works on single values and vectors"),(0,r.yg)("h3",{id:"atan"},"atan"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"atan(radians)")),(0,r.yg)("h3",{id:"clamp"},"clamp"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"clamp(value, min, max)")),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"When setting global configs, you may need to consider the order of code loadint when using ",(0,r.yg)("inlineCode",{parentName:"li"},"imports")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"requires"))))}g.isMDXComponent=!0}}]);