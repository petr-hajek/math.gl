"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4972],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>d});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),y=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=y(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,g=a(e,["components","mdxType","originalType","parentName"]),s=y(t),u=i,d=s["".concat(p,".").concat(u)]||s[u]||c[u]||o;return t?r.createElement(d,l(l({ref:n},g),{},{components:t})):r.createElement(d,l({ref:n},g))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[s]="string"==typeof e?e:i,l[1]=a;for(var y=2;y<o;y++)l[y]=t[y];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>y});var r=t(8168),i=(t(6540),t(5680));const o={},l="cutPolygonByGrid",a={unversionedId:"modules/polygon/api-reference/cut-polygon-by-grid",id:"modules/polygon/api-reference/cut-polygon-by-grid",title:"cutPolygonByGrid",description:"Subdivides a polygon by intersecting with a uniform grid.",source:"@site/../docs/modules/polygon/api-reference/cut-polygon-by-grid.md",sourceDirName:"modules/polygon/api-reference",slug:"/modules/polygon/api-reference/cut-polygon-by-grid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polygon-by-grid",draft:!1,editUrl:"https://github.com/visgl/math.gl/tree/master/docs/../docs/modules/polygon/api-reference/cut-polygon-by-grid.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"clipPolyline",permalink:"/math.gl/docs/modules/polygon/api-reference/clip-polyline"},next:{title:"cutPolylineByGrid",permalink:"/math.gl/docs/modules/polygon/api-reference/cut-polyline-by-grid"}},p={},y=[{value:"Usage",id:"usage",level:2}],g={toc:y},s="wrapper";function c(e){let{components:n,...t}=e;return(0,i.yg)(s,(0,r.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"cutpolygonbygrid"},"cutPolygonByGrid"),(0,i.yg)("p",{class:"badges"},(0,i.yg)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,i.yg)("p",null,"Subdivides a polygon by intersecting with a uniform grid."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"import {cutPolygonByGrid} from '@math.gl/polygon';\n\ncutPolygonByGrid([0, 15, 15, 0, 0, -15, 0, 15], {size: 2, gridResolution: 20});\n// returns [\n//   [15, 0, 0, -15, 0, 0, 15, 0],\n//   [15, 0, 0, 0, 0, 15, 15, 0]\n// ]\n]\n")),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"cutPolygonByGrid(positions, holeIndices, [options]);\n")),(0,i.yg)("p",null,"Arguments:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"holeIndices")," (Array|TypedArray|null) - the indices in ",(0,i.yg)("inlineCode",{parentName:"li"},"positions")," where each hole starts. If ",(0,i.yg)("inlineCode",{parentName:"li"},"null"),", the polygon has no holes."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"options")," (Object, optional)",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"size")," (Number) - the number of elements in each vertex. Size ",(0,i.yg)("inlineCode",{parentName:"li"},"2")," will interpret ",(0,i.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,i.yg)("inlineCode",{parentName:"li"},"[x0, y0, x1, y1, ...]")," and size ",(0,i.yg)("inlineCode",{parentName:"li"},"3")," will interpret ",(0,i.yg)("inlineCode",{parentName:"li"},"positions")," as ",(0,i.yg)("inlineCode",{parentName:"li"},"[x0, y0, z0, x1, y1, z1, ...]"),". Default ",(0,i.yg)("inlineCode",{parentName:"li"},"2"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"gridResolution")," (Number, optional) - the grid size. Default ",(0,i.yg)("inlineCode",{parentName:"li"},"10"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"gridOffset")," (Array, optional) - the grid offset in ",(0,i.yg)("inlineCode",{parentName:"li"},"[x, y]"),". Default ",(0,i.yg)("inlineCode",{parentName:"li"},"[0, 0]")," i.e. the grid starts from the coordinate origin."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"edgeTypes")," (Boolean) - if ",(0,i.yg)("inlineCode",{parentName:"li"},"true"),', returns an additional array for each polygon that describes the nature of each vertex. See "returns" below.')))),(0,i.yg)("p",null,"Returns:"),(0,i.yg)("p",null,"An array of polygons. Each polygons is represented by an object with the following fields:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"positions")," (Array|TypedArray) - a flat array of the vertex positions that define the polygon's rings.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"holeIndices")," (Array|TypedArray) - the indices in ",(0,i.yg)("inlineCode",{parentName:"p"},"positions")," where each hole starts. Not present if the polygon has no holes.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"edgeTypes")," (Array) - describes the nature of each vertex in ",(0,i.yg)("inlineCode",{parentName:"p"},"positions"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"0")," - the segment connecting this vertex to the next is inside the original polygon"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"1")," - the segment connecting this vertex to the next is on the border of the original polygon")))))}c.isMDXComponent=!0}}]);